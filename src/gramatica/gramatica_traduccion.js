/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,23],$V2=[1,24],$V3=[1,25],$V4=[1,22],$V5=[1,28],$V6=[1,17],$V7=[1,18],$V8=[1,26],$V9=[1,27],$Va=[1,20],$Vb=[5,19,25,28,29,30,39,43,46,53,101,102,103],$Vc=[1,38],$Vd=[1,42],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[1,52],$Vi=[1,57],$Vj=[1,56],$Vk=[1,69],$Vl=[1,65],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[19,61,62],$Vu=[22,48],$Vv=[19,36,54,66,72,82,83,84,85,86,87],$Vw=[5,19,25,28,29,30,39,43,44,46,53,101,102,103],$Vx=[1,95],$Vy=[1,96],$Vz=[1,97],$VA=[1,98],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[21,22,35,36,48,56,67,68,69,70,71,73,74,75,76,77,78,79,80,81],$VM=[1,120],$VN=[5,19,25,28,29,30,36,39,43,46,53,54,66,72,82,83,84,85,86,87,101,102,103],$VO=[1,141],$VP=[21,48,67],$VQ=[21,22,35,36,48,56,67,68,69,70,73,74,75,76,77,78,79,80,81],$VR=[21,22,48,56,67,73,80,81],$VS=[1,173],$VT=[1,177],$VU=[21,22,35,36,48,56,67,73,74,75,76,77,78,79,80,81],$VV=[21,22,48,56,67,73,74,75,76,77,78,79,80,81],$VW=[21,22,48,56,67,73,78,79,80,81],$VX=[1,194],$VY=[48,56],$VZ=[1,205],$V_=[34,48,56,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VARIABLE":7,"DECLARACION_FUNCION":8,"DECLARACION_TYPE":9,"ASIGNACION":10,"CONSOLE_LOG":11,"INSTRUCCION_IF":12,"RETURN":13,"WHILE":14,"DO_WHILE":15,"FOR":16,"LLAMADA_FUNCION":17,"INCREMENTO_DECREMENTO":18,"id":19,"par_izq_gra":20,"par_der_gra":21,"punto_coma":22,"LISTA_EXPRESIONES":23,"LLAMADA_FUNCION_EXP":24,"sentenciaWhile":25,"EXP":26,"signo_apertura":27,"signo_cierre":28,"do":29,"sentenciaFor":30,"ASIGNACION_FOR":31,"TIPO_IGUAL":32,"LISTA_ACCESOS_TYPE":33,"igual":34,"mas":35,"menos":36,"mas_mas":37,"menos_menos":38,"return":39,"IF":40,"ELSE":41,"LISTA_ELSE_IF":42,"sentenciaIf":43,"contrarioIf":44,"ELSE_IF":45,"declararFuncion":46,"LISTA_PARAMETROS":47,"coma":48,"PARAMETRO":49,"dos_puntos":50,"TIPO_VARIABLE_NATIVA":51,"LISTA_CORCHETES":52,"type":53,"llave_izq":54,"LISTA_ATRIBUTOS":55,"llave_der":56,"ATRIBUTO":57,"TIPO_DEC_VARIABLE":58,"LISTA_DECLARACIONES":59,"DEC_ID":60,"DEC_ID_TIPO":61,"DEC_ID_TIPO_CORCHETES":62,"DEC_ID_EXP":63,"DEC_ID_TIPO_EXP":64,"DEC_ID_TIPO_CORCHETES_EXP":65,"cor_izq":66,"cor_der":67,"por":68,"div":69,"mod":70,"potencia":71,"par_izq":72,"par_der":73,"mayor":74,"menor":75,"mayor_igual":76,"menor_igual":77,"igual_que":78,"dif_que":79,"and":80,"or":81,"not":82,"number":83,"string":84,"true":85,"false":86,"null":87,"ACCESO_TYPE":88,"TYPE":89,"ATRIBUTOS_TYPE":90,"ATRIBUTO_TYPE":91,"ARRAY_LENGTH":92,"punto":93,"length":94,"LISTA_ACCESOS_ARREGLO":95,"ARRAY_POP":96,"pop":97,"TERNARIO":98,"interrogacion":99,"ACCESO_ARREGLO":100,"declaracionVariable":101,"declaracionConstante":102,"console":103,"log":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"id",20:"par_izq_gra",21:"par_der_gra",22:"punto_coma",25:"sentenciaWhile",27:"signo_apertura",28:"signo_cierre",29:"do",30:"sentenciaFor",33:"LISTA_ACCESOS_TYPE",34:"igual",35:"mas",36:"menos",37:"mas_mas",38:"menos_menos",39:"return",43:"sentenciaIf",44:"contrarioIf",46:"declararFuncion",48:"coma",50:"dos_puntos",51:"TIPO_VARIABLE_NATIVA",53:"type",54:"llave_izq",56:"llave_der",61:"DEC_ID_TIPO",62:"DEC_ID_TIPO_CORCHETES",66:"cor_izq",67:"cor_der",68:"por",69:"div",70:"mod",71:"potencia",72:"par_izq",73:"par_der",74:"mayor",75:"menor",76:"mayor_igual",77:"menor_igual",78:"igual_que",79:"dif_que",80:"and",81:"or",82:"not",83:"number",84:"string",85:"true",86:"false",87:"null",93:"punto",94:"length",95:"LISTA_ACCESOS_ARREGLO",97:"pop",99:"interrogacion",101:"declaracionVariable",102:"declaracionConstante",103:"console",104:"log"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,4],[17,5],[24,3],[24,4],[14,7],[15,9],[16,10],[16,10],[10,4],[10,5],[32,1],[32,2],[32,2],[31,3],[31,2],[31,2],[13,3],[13,2],[12,1],[12,2],[12,2],[12,3],[40,7],[41,4],[45,8],[42,2],[42,1],[8,7],[47,3],[47,1],[49,3],[49,4],[9,6],[9,7],[55,3],[55,1],[57,3],[57,4],[7,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[65,6],[64,5],[63,3],[60,1],[52,3],[52,2],[18,3],[18,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,3],[26,2],[26,1],[26,1],[26,1],[89,3],[90,3],[90,1],[91,3],[92,3],[92,4],[92,4],[96,5],[96,6],[96,6],[98,5],[100,2],[88,2],[23,3],[23,1],[58,1],[58,1],[11,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 16:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 17:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'LLAMADA_FUNCION_EXP', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 20:
 this.$ = new NodoAST({label: 'WHILE', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 21:
 this.$ = new NodoAST({label: 'DO_WHILE', hijos: [$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 22: case 23:
 this.$ = new NodoAST({label: 'FOR', hijos: [$$[$0-9],$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'TIPO_IGUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27: case 28:
 this.$ = new NodoAST({label: 'TIPO_IGUAL', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 29:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 30: case 31:
 this.$ = new NodoAST({label: 'ASIGNACION_FOR', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 32:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 33:
 this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 35: case 36:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 37:
 this.$ = new NodoAST({label: 'INSTRUCCION_IF', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 38:
 this.$ = new NodoAST({label: 'IF', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 39:
 this.$ = new NodoAST({label: 'ELSE', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 40:
 this.$ = new NodoAST({label: 'ELSE_IF', hijos: [$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 41:
 this.$ = new NodoAST({label: 'LISTA_ELSE_IF', hijos: [...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 42:
 this.$ = new NodoAST({label: 'LISTA_ELSE_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
case 43:
 this.$ = new NodoAST({label: 'DECLARACION_FUNCION', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 44:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 45:
 this.$ = new NodoAST({label: 'LISTA_PARAMETROS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 46:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'PARAMETRO', hijos: [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 48:
 this.$ = new NodoAST({label: 'DECLARACION_TYPE', hijos: [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 49:
 this.$ = new NodoAST({label: 'DECLARACION_TYPE', hijos: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 50:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 51:
 this.$ = new NodoAST({label: 'LISTA_ATRIBUTOS', hijos: [$$[$0]], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'DECLARACION_VARIABLE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno});  
break;
case 55: case 56: case 57: case 58: case 59: case 60:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [...$$[$0-2].hijos,$$[$0]], linea: yylineno}); 
break;
case 61: case 62: case 63: case 64: case 65: case 66:
 this.$ = new NodoAST({label: 'LISTA_DECLARACIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 67:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_CORCHETES_EXP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 68:
 this.$ = new NodoAST({label: 'DEC_ID_TIPO_EXP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'DEC_ID_EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 70:
 this.$ = new NodoAST({label: 'DEC_ID', hijos: [$$[$0]], linea: yylineno}); 
break;
case 71:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: [...$$[$0-2].hijos, '[]'], linea: yylineno}); 
break;
case 72:
 this.$ = new NodoAST({label: 'LISTA_CORCHETES', hijos: ['[]'], linea: yylineno}); 
break;
case 73: case 74:
 this.$ = new NodoAST({label: 'INCREMENTO_DECREMENTO', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 75: case 82: case 83: case 93:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 76: case 77: case 78: case 79: case 80: case 81: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2], $$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'NUMBER', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'STRING', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 97: case 98:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'BOOLEAN', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 99:
 this.$ = new NodoAST({label: 'EXP', hijos: [new NodoAST({label: 'NULL', hijos: [$$[$0]], linea: yylineno})], linea: yylineno}); 
break;
case 100:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 101:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 102: case 103: case 104:
 this.$ = new NodoAST({label: 'EXP', hijos: [$$[$0]], linea: yylineno}); 
break;
case 105:
 this.$ = new NodoAST({label: 'TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 106:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0-2],$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 107:
 this.$ = new NodoAST({label: 'ATRIBUTOS_TYPE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 108:
 this.$ = new NodoAST({label: 'ATRIBUTO_TYPE', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 109:
 this.$ = new NodoAST({label: 'ARRAY_LENGTH', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 110: case 111:
 this.$ = new NodoAST({label: 'ARRAY_LENGTH', hijos: [$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 112:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 113: case 114:
 this.$ = new NodoAST({label: 'ARRAY_POP', hijos: [$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 115:
 this.$ = new NodoAST({label: 'TERNARIO', hijos: [$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 116:
 this.$ = new NodoAST({label: 'ACCESO_ARREGLO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 117:
 this.$ = new NodoAST({label: 'ACCESO_TYPE', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 118:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [...$$[$0-2].hijos,$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 119:
 this.$ = new NodoAST({label: 'LISTA_EXPRESIONES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 120: case 121:
 this.$ = new NodoAST({label: 'TIPO_DEC_VARIABLE', hijos: [$$[$0]], linea: yylineno}); 
break;
case 122:
 this.$ = new NodoAST({label: 'CONSOLE_LOG', hijos: [$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),{19:$Vc,59:31,60:32,61:[1,33],62:[1,34],63:35,64:36,65:37},{19:[1,39]},{19:[1,40]},{20:[1,43],32:41,33:$Vd,34:$Ve,35:$Vf,36:$Vg,37:[1,44],38:[1,45]},{93:[1,49]},o($Vb,[2,34],{41:50,42:51,45:53,44:$Vh}),{19:$Vi,22:[1,55],24:68,26:54,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{20:[1,70]},{27:[1,71]},{20:[1,72]},o($Vt,[2,120]),o($Vt,[2,121]),{20:[1,73]},{1:[2,1]},o($Vb,[2,2]),{22:[1,74],48:[1,75]},o($Vu,[2,61]),o($Vu,[2,62]),o($Vu,[2,63]),o($Vu,[2,64]),o($Vu,[2,65]),o($Vu,[2,66]),o($Vu,[2,70],{34:[1,76],50:[1,77]}),{20:[1,78]},{34:[1,79]},{19:$Vi,24:68,26:80,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{32:81,34:$Ve,35:$Vf,36:$Vg},{19:$Vi,21:[1,82],23:83,24:68,26:84,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{22:[1,85]},{22:[1,86]},o($Vv,[2,26]),{34:[1,87]},{34:[1,88]},{104:[1,89]},o($Vb,[2,35]),o($Vb,[2,36],{41:90,45:91,44:$Vh}),{27:[1,92],43:[1,93]},o($Vw,[2,42]),{22:[1,94],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},o($Vb,[2,33]),{19:$Vi,24:68,26:109,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VL,[2,96],{20:[1,113],33:[1,112],37:[1,110],38:[1,111]}),{19:$Vi,24:68,26:114,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:115,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VL,[2,94]),o($VL,[2,95]),o($VL,[2,97]),o($VL,[2,98]),o($VL,[2,99]),{19:$Vi,23:116,24:68,26:84,36:$Vj,54:$Vk,66:$Vl,67:[1,117],72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),{19:$VM,90:118,91:119},{19:$Vi,24:68,26:121,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{4:122,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{7:123,10:124,19:[1,125],58:16,101:$V8,102:$V9},{19:$Vi,24:68,26:126,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VN,[2,54]),{19:$Vc,60:127,61:[1,128],62:[1,129],63:130,64:131,65:132},{19:$Vi,24:68,26:133,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{51:[1,134]},{21:[1,135]},{54:[1,136]},{22:[1,137],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{19:$Vi,24:68,26:138,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{22:[1,139]},{21:[1,140],48:$VO},o($VP,[2,119],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),o($Vb,[2,73]),o($Vb,[2,74]),o($Vv,[2,27]),o($Vv,[2,28]),{20:[1,142]},o($Vb,[2,37]),o($Vw,[2,41]),{4:143,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{20:[1,144]},o($Vb,[2,32]),{19:$Vi,24:68,26:145,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:146,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:147,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:148,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:149,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:150,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:151,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:152,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:153,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:154,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:155,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:156,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:157,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:158,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VQ,[2,75],{71:$VC}),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,117]),{19:$Vi,21:[1,159],23:160,24:68,26:84,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,73:[1,161],74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},o($VR,[2,93],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),{48:$VO,67:[1,162]},o($VL,[2,101]),{56:[1,163]},{48:[1,164],56:[2,107]},{50:[1,165]},{21:[1,166],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,167],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{19:$Vi,24:68,26:168,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,24:68,26:169,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{32:41,33:$Vd,34:$Ve,35:$Vf,36:$Vg},{21:[1,170],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},o($Vu,[2,55]),o($Vu,[2,56]),o($Vu,[2,57]),o($Vu,[2,58]),o($Vu,[2,59]),o($Vu,[2,60]),o($Vu,[2,69],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),{34:[1,171],52:172,66:$VS},{27:[1,174]},{19:$VT,55:175,57:176},o($VN,[2,24]),{22:[1,178],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},o($Vb,[2,16]),{22:[1,179]},{19:$Vi,24:68,26:180,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{19:$Vi,23:181,24:68,26:84,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,182],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{19:$Vi,24:68,26:183,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},o($VU,[2,76],{68:$Vz,69:$VA,70:$VB,71:$VC}),o($VU,[2,77],{68:$Vz,69:$VA,70:$VB,71:$VC}),o($VQ,[2,78],{71:$VC}),o($VQ,[2,79],{71:$VC}),o($VQ,[2,80],{71:$VC}),o($VQ,[2,81],{71:$VC}),o($VV,[2,85],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC}),o($VV,[2,86],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC}),o($VV,[2,87],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC}),o($VV,[2,88],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC}),o($VW,[2,89],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG}),o($VW,[2,90],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG}),o($VR,[2,91],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI}),o([21,22,48,56,67,73,81],[2,92],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ}),o($VL,[2,18]),{21:[1,184],48:$VO},o($VL,[2,84]),o($VL,[2,100]),o($VL,[2,105]),{19:$VM,90:185,91:119},{19:$Vi,24:68,26:186,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{27:[1,187]},{25:[1,188]},{22:[1,189],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{22:[1,190],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{27:[1,191]},{19:$Vi,24:68,26:192,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{34:[1,193],66:$VX},{67:[1,195]},{4:196,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{56:[1,197]},{48:[1,198],56:[2,51]},{50:[1,199]},o($VN,[2,25]),o($Vb,[2,17]),o($VP,[2,118],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),{21:[1,200],48:$VO},o($Vb,[2,39]),{21:[1,201],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},o($VL,[2,19]),{56:[2,106]},o($VY,[2,108],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),{4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{20:[1,203]},{19:$VZ,31:204},{19:$VZ,31:206},{4:207,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vu,[2,68],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),{19:$Vi,24:68,26:208,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{67:[1,209]},o($V_,[2,72]),{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,210],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vb,[2,48],{22:[1,211]}),{19:$VT,55:212,57:176},{51:[1,213]},{22:[1,214]},{27:[1,215]},{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,216],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{19:$Vi,24:68,26:217,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{21:[1,218]},{32:219,34:$Ve,35:$Vf,36:$Vg,37:[1,220],38:[1,221]},{21:[1,222]},{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,223],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vu,[2,67],{35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK}),o($V_,[2,71]),o($Vb,[2,43]),o($Vb,[2,49]),{56:[2,50]},o($VY,[2,52],{52:224,66:$VS}),o($Vb,[2,122]),{4:225,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vb,[2,20]),{21:[1,226],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{27:[1,227]},{19:$Vi,24:68,26:228,36:$Vj,54:$Vk,66:$Vl,72:$Vm,82:$Vn,83:$Vo,84:$Vp,85:$Vq,86:$Vr,87:$Vs,88:66,89:67},{21:[2,30]},{21:[2,31]},{27:[1,229]},o($Vw,[2,38]),o($VY,[2,53],{66:$VX}),{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,230],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{22:[1,231]},{4:232,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{21:[2,29],35:$Vx,36:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK},{4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vw,[2,40]),o($Vb,[2,21]),{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,234],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},{6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V0,25:$V1,28:[1,235],29:$V2,30:$V3,39:$V4,40:21,43:$V5,46:$V6,53:$V7,58:16,101:$V8,102:$V9,103:$Va},o($Vb,[2,22]),o($Vb,[2,23])],
defaultActions: {29:[2,1],185:[2,106],212:[2,50],220:[2,30],221:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { NodoAST } = require('../arbol/nodoAST');
  const error_1 = require("../arbol/error");
  const errores_1 = require("../arbol/errores");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:// comentario simple
break;
case 2:// comentario multiple líneas
break;
case 3:return 101;
break;
case 4:return 102;
break;
case 5:return 103; 
break;
case 6:return 104;
break;
case 7:return 46;
break;
case 8:return 39;
break;
case 9:return 87;
break;
case 10:return 43;
break;
case 11:return 44;//else
break;
case 12:return 85; 
break;
case 13:return 86; 
break;
case 14:return 25;
break;
case 15:return 29;                    
break;
case 16:return 30;
break;
case 17:return 22;
break;
case 18:return 48;
break;
case 19:return 50;
break;
case 20:return 27; 
break;
case 21:return 28; 
break;
case 22:return 20; 
break;
case 23:return 21; 
break;
case 24:return 66;
break;
case 25:return 67;
break;
case 26:return 93;
break;
case 27:return 37;
break;
case 28:return 35;
break;
case 29:return 38
break;
case 30:return 36;
break;
case 31:return 71;
break;
case 32:return 68;
break;
case 33:return 69;
break;
case 34:return 70;
break;
case 35:return 77; 
break;
case 36:return 76; 
break;
case 37:return 74; 
break;
case 38:return 75; 
break;
case 39:return 78; 
break;
case 40:return 34; 
break;
case 41:return 79; 
break;
case 42:return 80; 
break;
case 43:return 81; 
break;
case 44:return 82; 
break;
case 45:return 99;
break;
case 46: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 84; 
break;
case 47: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 84; 
break;
case 48: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 84; 
break;
case 49:return 83;
break;
case 50:return 19;
break;
case 51:return 5;
break;
case 52:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:dv\b)/,/^(?:dc\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:declararF\b)/,/^(?:return\b)/,/^(?:null\b)/,/^(?:sentenciaIf\b)/,/^(?:contrarioIf\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:sentenciaWhile\b)/,/^(?:do\b)/,/^(?:sentenciaFor\b)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:--)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:\$=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:`[^\`]*`)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_traduccion;
exports.Parser = gramatica_traduccion.Parser;
exports.parse = function () { return gramatica_traduccion.parse.apply(gramatica_traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}